version: "3.8"

services:
  traefik:
    image: traefik:v2.4
    env_file: secrets.env
    command:
      - --log.level=INFO
      - --api.insecure=false
      - --providers.docker=true
      - --providers.docker.swarmMode=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.swarmModeRefreshSeconds=30
      - --entrypoints.http.address=:80
      - --entrypoints.https.address=:443
      - --certificatesresolvers.cloudflare.acme.dnschallenge=true
      - --certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.cloudflare.acme.email=${CF_EMAIL}
      - --certificatesresolvers.cloudflare.acme.storage=/letsencrypt/acme.json
      - --pilot.token=${PILOT_TOKEN}
      - --metrics.prometheus=true
      - --metrics.prometheus.entrypoint=metrics
      - --entrypoints.metrics.address=:8082
      - --metrics.prometheus.addServicesLabels=true
      - --metrics.prometheus.addEntryPointsLabels=true
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host
      - target: 8080
        published: 8080
        mode: ingress
      - target: 8082
        published: 8082
        mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /mnt/traefik/letsencrypt:/letsencrypt
    networks:
      - web
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
      labels:
        traefik.enable: "true"
        traefik.http.routers.reverse-proxy.rule: Host(`dash-cluster.$CF_DOMAIN`) # variable must exist in docker deploy environment
        traefik.http.routers.reverse-proxy.service: api@internal
        traefik.http.routers.reverse-proxy.entrypoints: https
        traefik.http.services.reverse-proxy.loadbalancer.server.port: 8080
        traefik.http.routers.reverse-proxy.tls.certresolver: cloudflare
        traefik.http.middlewares.https-redirect.redirectscheme.scheme: https
        traefik.http.middlewares.https-redirect.redirectscheme.permanent: "true"
      placement:
        constraints:
          - node.role == manager

  whoami:
    image: traefik/whoami
    env_file: secrets.env
    networks:
      - web
    deploy:
      labels:
        traefik.enable: "true"
        traefik.http.routers.whoami.rule: Host(`whoami-cluster.$CF_DOMAIN`) # variable must exist in docker deploy environment
        traefik.http.routers.whoami.entrypoints: https
        traefik.http.routers.whoami.tls.certresolver: cloudflare
        traefik.http.services.whoami.loadbalancer.server.port: 80

networks:
  web:
    external: true

