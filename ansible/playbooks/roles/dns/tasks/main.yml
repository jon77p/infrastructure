---
# Don't let DHCP4 set DNS servers (by using dhcp4-overrides in netplan)
- name: Disable DNS overrides
  become: true
  ansible.builtin.blockinfile:
    path: /etc/netplan/50-cloud-init.yaml
    insertafter: "(\\s*)set-name: (\\S+)"
    marker: "            # {mark} ANSIBLE MANAGED BLOCK"
    block: "            dhcp4-overrides:\n                use-dns: false\n                use-domains: false\n"
  register: netplan_dhcp

- name: Apply new netplan
  become: true
  ansible.builtin.command: netplan apply
  async: 5
  poll: 1
  when: netplan_dhcp.changed

- name: Normalize nameservers
  ansible.builtin.include_tasks: normalize_nameservers.yml
  loop: "{{ nameservers }}"
  loop_control:
    loop_var: nameserver

- name: Get primary network interface
  become: true
  ansible.builtin.shell: "ip route | grep default | awk '{print $5}'"
  register: primary_interface_output

- name: Set primary network interface
  ansible.builtin.set_fact:
    primary_interface: "{{ primary_interface_output.stdout }}"

# We want to set the following DNS settings interface:
- name: Set DNS settings
  ansible.builtin.set_fact:
    dns_settings:
      DNSStubListener: "no"
      DNS: "{{ normalized_nameservers }}"
      FallbackDNS: "{{ hostvars['pihole'].nameservers }}"
      Domain: "~."
      DNSSEC: "no"

# Create /etc/systemd/resolved.conf.d if it doesn't exist
- name: Create /etc/systemd/resolved.conf.d
  become: true
  ansible.builtin.file:
    path: /etc/systemd/resolved.conf.d
    state: directory
    owner: root
    group: root
    mode: "0755"

# Create drop-in file for systemd-resolved to set global DNS settings
- name: Create drop-in file for systemd-resolved for global DNS settings
  become: true
  ansible.builtin.copy:
    dest: /etc/systemd/resolved.conf.d/10-{{ primary_interface }}.conf
    content: |
      [Resolve]
      DNS={{ dns_settings.DNS | join(' ') }}
      FallbackDNS={{ dns_settings.FallbackDNS | join(' ') }}
      Domains={{ dns_settings.Domain }}
      DNSSEC={{ dns_settings.DNSSEC }}
      DNSStubListener={{ dns_settings.DNSStubListener }}
    owner: root
    group: root
    mode: "0644"

# Restart DNS-related services
- name: Restart systemd-resolved
  become: true
  ansible.builtin.systemd:
    name: systemd-resolved
    state: restarted

# Make sure that we can still resolve DNS
- name: Check DNS resolution
  ansible.builtin.command: ping -c 1 google.com
  register: ping_google
  until: ping_google is succeeded
  retries: 5
  delay: 5
