---
# Don't let DHCP4 set DNS servers (by using dhcp4-overrides in netplan)
- name: Disable DNS overrides
  become: true
  ansible.builtin.blockinfile:
    path: /etc/netplan/50-cloud-init.yaml
    insertafter: "(\\s*)set-name: (\\S+)"
    marker: "            # {mark} ANSIBLE MANAGED BLOCK"
    block: "            dhcp4-overrides:\n                use-dns: false\n                use-domains: false\n"
  register: netplan_dhcp

- name: Apply new netplan
  become: true
  ansible.builtin.command: netplan apply
  async: 5
  poll: 1
  when: netplan_dhcp.changed

- name: Normalize nameservers
  include_tasks: normalize_nameservers.yml
  loop: "{{ nameservers }}"
  loop_control:
    loop_var: nameserver

# We want to set the following DNS settings interface:
- name: Set DNS settings
  ansible.builtin.set_fact:
    dns_settings:
      DNSStubListener: no
      DNS: "{{ normalized_nameservers }}"
      FallbackDNS: "{{ hostvars['pihole'].nameservers }}"
      Domain: "~."
      DNSSEC: "no"

# Create /etc/systemd/resolved.conf.d if it doesn't exist
- name: Create /etc/systemd/resolved.conf.d
  become: true
  ansible.builtin.file:
    path: /etc/systemd/resolved.conf.d
    state: directory
    owner: root
    group: root
    mode: 0755

# Create drop-in file for systemd-resolved to set global DNS settings
# - name: Create drop-in file for systemd-resolved for global DNS settings
#   become: true
#   ansible.builtin.copy:
#     dest: /etc/systemd/resolved.conf.d/10-stub-resolver.conf
#     content: |
#       [Resolve]
#       DNSStubListener={{ dns_settings.DNSStubListener }}
#       DNS={{ dns_settings.FallbackDNS | join(' ') }}
#       # Domains={{ dns_settings.Domain }}
#     owner: root
#     group: root
#     mode: 0644

- name: Restart systemd-resolved
  become: true
  ansible.builtin.systemd:
    name: systemd-resolved
    state: restarted

- name: Get primary network interface
  become: true
  ansible.builtin.shell: "ip route | grep default | awk '{print $5}'"
  register: primary_interface

# Use resolvectl to set DNS settings on the primary interface
- name: Set DNS settings on primary interface
  become: true
  ansible.builtin.command: resolvectl dns {{ primary_interface.stdout }} {{ dns_settings.DNS | join(' ') }}
  register: resolvectl_dns
- name: Set Domain settings on primary interface
  become: true
  ansible.builtin.command: resolvectl domain {{ primary_interface.stdout }} {{ dns_settings.Domain }}
  register: resolvectl_domain
- name: Set DNSSEC settings on primary interface
  become: true
  ansible.builtin.command: resolvectl dnssec {{ primary_interface.stdout }} {{ dns_settings.DNSSEC }}
  register: resolvectl_dnssec

# Make sure that we can still resolve DNS
- name: Check DNS resolution
  ansible.builtin.command: ping -c 1 google.com
  register: ping_google
  until: ping_google is succeeded
  retries: 5
  delay: 5
